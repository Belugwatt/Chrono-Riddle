// Fonction pour g√©n√©rer une matrice 5x5 remplie de z√©ros
function generateMatrix() {
    return Array.from({ length: 5 }, () => Array(5).fill('üî≤'));
}

// Fonction pour v√©rifier si une position est valide dans la matrice et n'a pas √©t√© visit√©e
function isValidPosition(x, y, visitedPositions) {
    return x >= 0 && x < 5 && y >= 0 && y < 5 && !visitedPositions.has(`${x},${y}`);
}

// Fonction pour g√©n√©rer un chemin al√©atoire dans la matrice
function generateRandomPath() {
    const directions = ['‚¨ÜÔ∏è', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨áÔ∏è']; // Haut, Droite, Gauche, Bas

    let path = [];
    let currentX = 0;
    let currentY = 0;
    let visitedPositions = new Set(); // Ensemble des positions visit√©es

    // Choisir al√©atoirement le d√©but du chemin (DD ou DB)
    const startDirection = Math.random() < 0.5 ? 'DD' : 'DB';
    visitedPositions.add(`${currentX},${currentY}`); // Ajouter la position de d√©part aux positions visit√©es    
    if (startDirection === 'DD') {
        currentX++;
    } else {
        currentY++;
    }
    path.push(startDirection);

    while (true) {
        let direction;
        do {
            direction = directions[Math.floor(Math.random() * directions.length)]; // Choisir une direction al√©atoire
        } while (!isValidPosition(currentX, currentY, visitedPositions)); // Continuer √† choisir une direction jusqu'√† ce qu'elle soit valide

        // Ajouter la nouvelle position aux positions visit√©es
        visitedPositions.add(`${currentX},${currentY}`);

        if (path[path.length - 1] == 'DB' || path[path.length - 1] == 'DD') {
            //situation d√©but
            path.push(direction);

            // Mettre √† jour les coordonn√©es en fonction de la direction choisie
            if (direction === '‚¨ÜÔ∏è') currentY--;
            else if (direction === '‚û°Ô∏è') currentX++;
            else if (direction === '‚¨ÖÔ∏è') currentX--;
            else if (direction === '‚¨áÔ∏è') currentY++;

        }
        else {

            //Situation arp√®s le d√©but
            if (path[path.length - 1] == direction) {
                //situation si on change pas de direction
                path.push(direction);


                // Mettre √† jour les coordonn√©es en fonction de la direction choisie
                if (direction === '‚¨ÜÔ∏è') currentY--;
                else if (direction === '‚û°Ô∏è') currentX++;
                else if (direction === '‚¨ÖÔ∏è') currentX--;
                else if (direction === '‚¨áÔ∏è') currentY++;

                else {
                    console.log('Erreur de direction');
                }


            }

            else {
                //situation o√π il y a/avait une rotation
                if (path[path.length - 1] == '‚¨ÜÔ∏è' ||
                    path[path.length - 1] == '‚û°Ô∏è' ||
                    path[path.length - 1] == '‚¨áÔ∏è' ||
                    path[path.length - 1] == '‚¨ÖÔ∏è') {

                    //situation o√π la case avant c'est une direction
                    switch (direction) {
                        case '‚¨ÜÔ∏è':
                            switch (path[path.length - 1]) {

                                case '‚û°Ô∏è':
                                    path.push('‚îò');
                                    currentY--;
                                    break;

                                case '‚¨áÔ∏è':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();

                                case '‚¨ÖÔ∏è':
                                    path.push('‚îî');
                                    currentY--;
                                    break;
                            }

                        case '‚û°Ô∏è':
                            switch (path[path.length - 1]) {

                                case '‚¨ÜÔ∏è':
                                    path.push('‚îå');
                                    currentX++;
                                    break;

                                case '‚¨áÔ∏è':
                                    path.push('‚îî');
                                    currentX++;
                                    break;

                                case '‚¨ÖÔ∏è':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();
                            }

                        case '‚¨áÔ∏è':
                            switch (path[path.length - 1]) {

                                case '‚¨ÜÔ∏è':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();

                                case '‚û°Ô∏è':
                                    path.push('‚îê');
                                    currentY++;
                                    break;

                                case '‚¨ÖÔ∏è':
                                    path.push('‚îå');
                                    currentY++;
                                    break;

                            }

                        case '‚¨ÖÔ∏è':
                            switch (path[path.length - 1]) {

                                case '‚¨ÜÔ∏è':
                                    path.push('‚îê');
                                    currentX--;
                                    break;

                                case '‚û°Ô∏è':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();

                                case '‚¨áÔ∏è':
                                    path.push('‚îò');
                                    currentX--;
                                    break;
                            }
                    }
                }
                else {
                    //situation o√π la case pr√©c√©dent est une case angle
                    switch (direction) {
                        case '‚¨ÜÔ∏è':
                            switch (path[path.length - 1]) {

                                case '‚îò':
                                    path.push('‚îò');
                                    currentY--;
                                    break;

                                case '‚îî':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();

                                case '‚îå':
                                    path.push('‚îî');
                                    currentY--;
                                    break;

                                case '‚îê':
                                    path.push('‚îî');
                                    currentY--;
                                    break;
                            }

                        case '‚û°Ô∏è':
                            switch (path[path.length - 1]) {

                                case '‚¨ÜÔ∏è':
                                    path.push('‚îå');
                                    currentX++;
                                    break;

                                case '‚¨áÔ∏è':
                                    path.push('‚îî');
                                    currentX++;
                                    break;

                                case '‚¨ÖÔ∏è':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();
                            }

                        case '‚¨áÔ∏è':
                            switch (path[path.length - 1]) {

                                case '‚¨ÜÔ∏è':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();

                                case '‚û°Ô∏è':
                                    path.push('‚îê');
                                    currentY++;
                                    break;

                                case '‚¨ÖÔ∏è':
                                    path.push('‚îå');
                                    currentY++;
                                    break;

                            }

                        case '‚¨ÖÔ∏è':
                            switch (path[path.length - 1]) {

                                case '‚¨ÜÔ∏è':
                                    path.push('‚îê');
                                    currentX--;
                                    break;

                                case '‚û°Ô∏è':
                                    //cas impossible, on relance la g√©n√©ration
                                    return generateRandomPath();

                                case '‚¨áÔ∏è':
                                    path.push('‚îò');
                                    currentX--;
                                    break;
                            }
                    }
                }



                console.log('On tourne', path);
            }
        }
        if (!isValidPosition(currentX, currentY, visitedPositions)) break;
    }


    path[path.length - 1] = 'üèÅ';

    if (path.length < 5) {
        return generateRandomPath();
    }
    else {
        return path;
    }
}

// Fonction pour mettre √† jour la matrice avec le chemin
function updateMatrixWithPath(matrix, path) {
    let currentX = 0;
    let currentY = 0;

    path.forEach(direction => {
        matrix[currentY][currentX] = direction;
        if (direction === 'DD') currentX++;
        else if (direction === 'DB') currentY++;
        else if (direction === '‚¨ÜÔ∏è') currentY--;
        else if (direction === '‚û°Ô∏è') currentX++;
        else if (direction === '‚¨ÖÔ∏è') currentX--;
        else if (direction === '‚¨áÔ∏è') currentY++;
        //it false bro
        else if (direction === '‚îå') currentX++;
        else if (direction === '‚îê') currentY++;
        else if (direction === '‚îò') currentY--;
        else if (direction === '‚îò') currentX--;
    });

    return matrix;
}

// G√©n√©rer la matrice
const matrix = generateMatrix();
// G√©n√©rer le chemin
const path = generateRandomPath();
// Mettre √† jour la matrice avec le chemin
const matrixWithPath = updateMatrixWithPath(matrix, path);
console.log(path);
console.log(matrixWithPath);

document.querySelector("#resultat").innerHTML =
    `<div>${matrixWithPath[0]}</div><br>
<div>${matrixWithPath[1]}</div><br>
<div>${matrixWithPath[2]}</div><br>
<div>${matrixWithPath[3]}</div><br>
<div>${matrixWithPath[4]}</div><br>
<div>Le chemin : ${path}</div>`;

