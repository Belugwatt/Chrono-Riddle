// Fonction pour g√©n√©rer une matrice 5x5 remplie de z√©ros
function generateMatrix() {
    return Array.from({ length: 5 }, () => Array(5).fill('üî≤'));
}


// Fonction pour g√©n√©rer une matrice 5x5 remplie de z√©ros
function generateMatrixRandom() {
    const symbols = ['‚¨ÜÔ∏è', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨áÔ∏è', '‚îò', '‚îî', '‚îê', '‚îå'];
    return Array.from({ length: 5 }, () => Array.from({ length: 5 }, () => symbols[Math.floor(Math.random() * symbols.length)]));
}


// Fonction pour v√©rifier si une position est valide dans la matrice et n'a pas √©t√© visit√©e
function isValidPosition(x, y, visitedPositions) {
    return x >= 0 && x < 5 && y >= 0 && y < 5 && !visitedPositions.has(`${x},${y}`);
}


// Fonction pour g√©n√©rer un chemin al√©atoire dans la matrice
function generateRandomPath() {
    const directions = ['‚¨ÜÔ∏è', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨áÔ∏è']; // Haut, Droite, Gauche, Bas

    let path = [];
    let currentX = 0;
    let currentY = 0;
    let visitedPositions = new Set(); // Ensemble des positions visit√©es

    // Choisir al√©atoirement le d√©but du chemin (DD ou DB)
    const startDirection = Math.random() < 0.5 ? 'DD' : 'DB';
    visitedPositions.add(`${currentX},${currentY}`); // Ajouter la position de d√©part aux positions visit√©es    
    if (startDirection === 'DD') {
        currentX++;
    } else {
        currentY++;
    }
    path.push(startDirection);

    while (true) {
        let direction;
        do {
            direction = directions[Math.floor(Math.random() * directions.length)]; // Choisir une direction al√©atoire
        } while (!isValidPosition(currentX, currentY, visitedPositions)); // Continuer √† choisir une direction jusqu'√† ce qu'elle soit valide

        // Ajouter la nouvelle position aux positions visit√©es
        visitedPositions.add(`${currentX},${currentY}`);


        path.push(direction);

        // Mettre √† jour les coordonn√©es en fonction de la direction choisie
        if (direction === '‚¨ÜÔ∏è') currentY--;
        else if (direction === '‚û°Ô∏è') currentX++;
        else if (direction === '‚¨ÖÔ∏è') currentX--;
        else if (direction === '‚¨áÔ∏è') currentY++;


        if (!isValidPosition(currentX, currentY, visitedPositions)) break;
    }


    path[path.length - 1] = 'üèÅ';

    if (path.length < 5) {
        return generateRandomPath();
    }
    else {
        return path;
    }
}



// Fonction pour mettre √† jour la matrice avec le chemin
function updateMatrixWithPath(matrix, path) {
    let currentX = 0;
    let currentY = 0;

    path.forEach((direction, index) => {
        matrix[currentY][currentX] = direction;




        // V√©rifier s'il s'agit d'une direction autre que le d√©but du chemin
        if (index > 0) {
            const prevDirection = path[index - 1];

            // D√©terminer l'angle correspondant en fonction des deux directions
            let corner;
            if ((prevDirection ==='DB' && direction ==='‚û°Ô∏è' || prevDirection === '‚¨ÖÔ∏è' && direction === '‚¨ÜÔ∏è') || (prevDirection === '‚¨áÔ∏è' && direction === '‚û°Ô∏è')) {
                corner = '‚îî';
            } else if ((prevDirection === '‚¨ÜÔ∏è' && direction === '‚û°Ô∏è') || (prevDirection === '‚¨ÖÔ∏è' && direction === '‚¨áÔ∏è')) {
                corner = '‚îå';
            } else if ((prevDirection ==='DD' && direction ==='‚¨áÔ∏è' || prevDirection === '‚û°Ô∏è' && direction === '‚¨áÔ∏è') || (prevDirection === '‚¨ÖÔ∏è' && direction === '‚¨ÜÔ∏è')) {
                corner = '‚îê';
            } else if ((prevDirection === '‚û°Ô∏è' && direction === '‚¨ÜÔ∏è') || (prevDirection === '‚¨áÔ∏è' && direction === '‚¨ÖÔ∏è')) {
                corner = '‚îò';
            }

            // Si un angle a √©t√© d√©termin√©, mettre √† jour la case correspondante
            if (corner) {
                matrix[currentY][currentX] = corner;
            }
        }


        if (direction === 'DD') currentX++;
        else if (direction === 'DB') currentY++;
        else if (direction === '‚¨ÜÔ∏è') currentY--;
        else if (direction === '‚û°Ô∏è') currentX++;
        else if (direction === '‚¨ÖÔ∏è') currentX--;
        else if (direction === '‚¨áÔ∏è') currentY++;
    });


    //La matrix propose un chemin fonctionnel, maintenant on replace les fl√®ches qui change de direction par des angles ‚îò‚îî ‚îê‚îå



    return matrix;
}

//G√©n√©rer une matrice al√©atoire
const randomMatrix = generateMatrixRandom();
// G√©n√©rer la matrice
const matrix = generateMatrix();
// G√©n√©rer le chemin
const path = generateRandomPath();
// Mettre √† jour la matrice avec le chemin
const matrixWithPath = updateMatrixWithPath(randomMatrix, path);

// Pour voir uniquement le chemin soluce g√©n√©r√© par le code :
// const matrixWithPath = updateMatrixWithPath(matrix, path);

console.log(path);
console.log(matrixWithPath);


document.querySelector("#resultat").innerHTML =
    `<div>${matrixWithPath[0]}</div><br>
<div>${matrixWithPath[1]}</div><br>
<div>${matrixWithPath[2]}</div><br>
<div>${matrixWithPath[3]}</div><br>
<div>${matrixWithPath[4]}</div><br>
<div>Le chemin : ${path}</div>`;

