// Fonction pour g√©n√©rer une matrice 5x5 remplie de z√©ros
function generateMatrix() {
    return Array.from({ length: 5 }, () => Array(5).fill('üî≤'));
}

// Fonction pour g√©n√©rer une matrice 5x5 random
function generateMatrixRandom() {
    const symbols = ['‚¨ÜÔ∏è', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨áÔ∏è', 'üî≤', 'üî≤', 'üî≤', 'üî≤', '‚îò', '‚îî', '‚îê', '‚îå'];
    return Array.from({ length: 7 }, () => Array.from({ length: 7 }, () => symbols[Math.floor(Math.random() * symbols.length)]));
}

// Fonction pour v√©rifier si une position est valide dans la matrice et n'a pas √©t√© visit√©e
function isValidPosition(x, y, visitedPositions) {
    return x >= 0 && x < 5 && y >= 0 && y < 5 && !visitedPositions.has(`${x},${y}`);
}

// Fonction pour g√©n√©rer un chemin al√©atoire dans la matrice
function generateRandomPath() {
    const directions = ['‚¨ÜÔ∏è', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨áÔ∏è']; // Haut, Droite, Gauche, Bas

    let path = [];
    let currentX = 0;
    let currentY = 0;
    let visitedPositions = new Set(); // Ensemble des positions visit√©es

    // Choisir al√©atoirement le d√©but du chemin (DD ou DB)
    const startDirection = Math.random() < 0.5 ? 'DD' : 'DB';
    visitedPositions.add(`${currentX},${currentY}`); // Ajouter la position de d√©part aux positions visit√©es    
    if (startDirection === 'DD') {
        currentX++;
    } else {
        currentY++;
    }
    path.push(startDirection);

    while (true) {
        let direction;
        do {
            direction = directions[Math.floor(Math.random() * directions.length)]; // Choisir une direction al√©atoire
        } while (!isValidPosition(currentX, currentY, visitedPositions)); // Continuer √† choisir une direction jusqu'√† ce qu'elle soit valide

        // Ajouter la nouvelle position aux positions visit√©es
        visitedPositions.add(`${currentX},${currentY}`);

        path.push(direction);

        // Mettre √† jour les coordonn√©es en fonction de la direction choisie
        if (direction === '‚¨ÜÔ∏è') currentY--;
        else if (direction === '‚û°Ô∏è') currentX++;
        else if (direction === '‚¨ÖÔ∏è') currentX--;
        else if (direction === '‚¨áÔ∏è') currentY++;

        if (!isValidPosition(currentX, currentY, visitedPositions)) break;
    }

    path[path.length - 1] = 'üèÅ';

    if (path.length < 10) {
        return generateRandomPath();
    }
    else {
        return path;
    }
}

// Fonction pour mettre √† jour la matrice avec les rotations
function updateMatrixWithPath(matrix, path) {
    let currentX = 0;
    let currentY = 0;

    path.forEach((direction, index) => {
        matrix[currentY][currentX] = direction;

        // V√©rifier s'il s'agit d'une direction autre que le d√©but du chemin
        if (index > 0) {
            const prevDirection = path[index - 1];
            let corner;
            if ((prevDirection === 'DB' && direction === '‚û°Ô∏è' || prevDirection === '‚¨ÖÔ∏è' && direction === '‚¨ÜÔ∏è') || (prevDirection === '‚¨áÔ∏è' && direction === '‚û°Ô∏è')) {
                corner = '‚îî';
            } else if ((prevDirection === '‚¨ÜÔ∏è' && direction === '‚û°Ô∏è') || (prevDirection === '‚¨ÖÔ∏è' && direction === '‚¨áÔ∏è')) {
                corner = '‚îå';
            } else if ((prevDirection === 'DD' && direction === '‚¨áÔ∏è') || (prevDirection === '‚û°Ô∏è' && direction === '‚¨áÔ∏è') || (prevDirection === '‚¨ÜÔ∏è' && direction === '‚¨ÖÔ∏è')) {
                corner = '‚îê';
            } else if ((prevDirection === '‚û°Ô∏è' && direction === '‚¨ÜÔ∏è') || (prevDirection === '‚¨áÔ∏è' && direction === '‚¨ÖÔ∏è')) {
                corner = '‚îò';
            } else if (direction == 'üèÅ') {
                switch (prevDirection) {
                    case '‚û°Ô∏è':
                        matrix[currentY][currentX] = "GüèÅ";
                        break;

                    case '‚¨áÔ∏è':
                        matrix[currentY][currentX] = "HüèÅ";
                        break;

                    case '‚¨ÖÔ∏è':
                        matrix[currentY][currentX] = "DüèÅ";
                        break;

                    case '‚¨ÜÔ∏è':
                        matrix[currentY][currentX] = "BüèÅ";
                        break;
                }
            }

            if (corner) {
                matrix[currentY][currentX] = corner;
            }
        }

        if (direction === 'DD') currentX++;
        else if (direction === 'DB') currentY++;
        else if (direction === '‚¨ÜÔ∏è') currentY--;
        else if (direction === '‚û°Ô∏è') currentX++;
        else if (direction === '‚¨ÖÔ∏è') currentX--;
        else if (direction === '‚¨áÔ∏è') currentY++;
    });

    // Appliquer les rotations sur chaque cellule

    matrix.forEach((row, rowIndex) => {
        row.forEach((cell, colIndex) => {
            if (cell !== 'GüèÅ' &&
                cell !== 'HüèÅ' &&
                cell !== 'DüèÅ' &&
                cell !== 'BüèÅ' &&
                cell !== 'DD' &&
                cell !== 'DB' &&
                cell != 'üî≤') {
                matrix[rowIndex][colIndex] = rotateCell(cell);
            }
        });
    });

    return matrix;
}

// Fonction pour g√©rer le clic sur une case
function handleClick(x, y) {
    let currentValue = matrixWithPath[y][x];
    if (currentValue === 'üèÅ' || currentValue === 'DD' || currentValue === 'DB' || currentValue === 'üî≤') {
        return;
    }
    let newValue = rotateCell(currentValue, false);
    matrixWithPath[y][x] = newValue;
    updateMatrixDisplay();
    if (findPath(matrixWithPath) == true) {
        console.log('win');
    }

}


// Fonction pour mettre √† jour l'affichage de la matrice
function updateMatrixDisplay() {
    let html = '';
    matrixWithPath.forEach((row, rowIndex) => {
        html += '<div>';
        row.forEach((cell, colIndex) => {
            if (cell === 'GüèÅ' ||
                cell === 'HüèÅ' ||
                cell === 'DüèÅ' ||
                cell === 'BüèÅ' ||
                cell === 'DD' ||
                cell === 'DB') {
                html += `<span>${cell}</span>`;
            } else {
                html += `<span onclick="handleClick(${colIndex}, ${rowIndex})">${cell}</span>`;
            }
        });
        html += '</div><br>';
    });
    document.querySelector("#resultat").innerHTML = html;
}

// Fonction pour effectuer une rotation al√©atoire ou fixe sur une cellule
function rotateCell(cell, random = true) {
    const rotations = random ? Math.floor(Math.random() * 4) : 1;
    let rotatedCell = cell;
    for (let i = 0; i < rotations; i++) {
        switch (rotatedCell) {
            case '‚¨ÜÔ∏è':
                rotatedCell = '‚û°Ô∏è';
                break;
            case '‚û°Ô∏è':
                rotatedCell = '‚¨áÔ∏è';
                break;
            case '‚¨áÔ∏è':
                rotatedCell = '‚¨ÖÔ∏è';
                break;
            case '‚¨ÖÔ∏è':
                rotatedCell = '‚¨ÜÔ∏è';
                break;
            case '‚îå':
                rotatedCell = '‚îî';
                break;
            case '‚îî':
                rotatedCell = '‚îò';
                break;
            case '‚îò':
                rotatedCell = '‚îê';
                break;
            case '‚îê':
                rotatedCell = '‚îå';
                break;
            default:
                rotatedCell = cell;
        }
    }
    return rotatedCell;
}


//G√©n√©rer une matrice al√©atoire
const randomMatrix = generateMatrixRandom();

// G√©n√©rer la matrice
const path = generateRandomPath();
console.log(path);
// Mettre √† jour la matrice avec le chemin et les rotations
const matrixWithPath = updateMatrixWithPath(randomMatrix, path);
// Appeler la fonction pour afficher la matrice initiale
updateMatrixDisplay();


// Fonction findPath mise √† jour pour tenir compte des fl√®ches et des cases vides
function findPath(matrix) {
    const end = { x: -1, y: -1 };
    const start = { x: -1, y: -1 };
    const moves = { 'down': { x: 0, y: 1 }, 'up': { x: 0, y: -1 }, 'right': { x: 1, y: 0 }, 'left': { x: -1, y: 0 } };
    const directions = {
        'DD': 'right',
        'DB': 'down',
        '‚¨ÜÔ∏è': 'up',
        '‚û°Ô∏è': 'right',
        '‚¨ÖÔ∏è': 'left',
        '‚¨áÔ∏è': 'down',
        '‚îå': ['down', 'right'],
        '‚îê': ['down', 'left'],
        '‚îî': ['up', 'right'],
        '‚îò': ['up', 'left']
    };

    // Trouver les points de d√©part et de fin
    for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
            if (matrix[i][j] === 'GüèÅ' ||
                matrix[i][j] === 'HüèÅ' ||
                matrix[i][j] === 'DüèÅ' ||
                matrix[i][j] === 'BüèÅ'
            ) {
                end.x = j;
                end.y = i;
            } else if (matrix[i][j] === 'DD' || matrix[i][j] === 'DB') {
                start.x = j;
                start.y = i;
            }
        }
    }

    // Si les points de d√©part ou de fin ne sont pas trouv√©s, retourner false
    if (end.x === -1 || end.y === -1 || start.x === -1 || start.y === -1) {
        return false;
    }

    let current = { x: start.x, y: start.y };
    let prevDirection = [];



    while (true) {
        // V√©rifier si le mouvement est √† l'int√©rieur des limites de la matrice
        if (current.x < 0 || current.x > matrix[0].length-1 || current.y < 0 || current.y > matrix.length-1) {
            return false;
        }

        if (prevDirection.some(coord => coord[0] === current.y && coord[1] === current.x)) {
            return false
        }
        else prevDirection.push([current.y, current.x]);

        direction = matrix[current.y][current.x];

        //Cas d√©part
        if (direction == 'DD' || direction == 'DB') {
            move = moves[directions[direction]];
            current.x += move.x;
            current.y += move.y;

            continue;
        }
        //Autre cas
        let tabPrev = prevDirection[prevDirection.length - 2]
        //Si la direction est un angle
        switch (direction) {

            case "‚¨ÜÔ∏è":
                if (current.y < tabPrev[0] && current.x == tabPrev[1]) {
                    move = moves[directions[direction]];
                }
                else return false;
                break;

            case "‚û°Ô∏è":
                if (current.y == tabPrev[0] && current.x > tabPrev[1]) {
                    move = moves[directions[direction]];
                }
                else return false;
                break;

            case "‚¨áÔ∏è":
                if (current.y > tabPrev[0] && current.x == tabPrev[1]) {
                    move = moves[directions[direction]];
                }
                else return false;
                break;

            case "‚¨ÖÔ∏è":
                if (current.y == tabPrev[0] && current.x < tabPrev[1]) {
                    move = moves[directions[direction]];
                }
                else return false;
                break;
            case '‚îå':
                if (current.y < tabPrev[0] && current.x == tabPrev[1]) {
                    move = moves[directions[direction][1]];
                }
                else if (current.y == tabPrev[0] && current.x < tabPrev[1]) {
                    move = moves[directions[direction][0]];
                }
                else return false;
                break;

            case '‚îê':
                if (current.y < tabPrev[0] && current.x == tabPrev[1]) {
                    move = moves[directions[direction][1]];
                }
                else if (current.y == tabPrev[0] && current.x > tabPrev[1]) {
                    move = moves[directions[direction][0]];
                }
                else return false;
                break;

            case '‚îî':
                if (current.y > tabPrev[0] && current.x == tabPrev[1]) {
                    move = moves[directions[direction][1]];
                }
                else if (current.y == tabPrev[0] && current.x < tabPrev[1]) {
                    move = moves[directions[direction][0]];
                }
                else return false;
                break;

            case '‚îò':
                if (current.y > tabPrev[0] && current.x == tabPrev[1]) {
                    move = moves[directions[direction][1]];
                }
                else if (current.y == tabPrev[0] && current.x > tabPrev[1]) {
                    move = moves[directions[direction][0]];
                }
                else return false;
                break;

            case 'üî≤':
                return false;

            case "HüèÅ":
                if (current.y > tabPrev[0] && current.x == tabPrev[1]) {
                    return true;
                }
                else return false;

            case "DüèÅ":
                if (current.y == tabPrev[0] && current.x < tabPrev[1]) {
                    return true;
                }
                else return false;

            case "BüèÅ":
                if (current.y < tabPrev[0] && current.x == tabPrev[1]) {
                    return true;
                }
                else
                    return false;

            case "GüèÅ":
                if (current.y == tabPrev[0] && current.x > tabPrev[1]) {
                    return true;
                }
                else return false;

            default :
                return 'erreur';

        }
        current.x += move.x;
        current.y += move.y;
    }
}


// Exemple d'utilisation
const matrix1 = [
    ['DB', 'BüèÅ', '‚îî', '‚û°Ô∏è', '‚¨ÜÔ∏è'],
    ['‚îê', '‚îò', '‚¨ÖÔ∏è', 'üî≤', '‚¨áÔ∏è'],
    ['‚îå', '‚îê', 'üî≤', 'üî≤', 'üî≤'],
    ['üî≤', '‚îê', 'üî≤', '‚îò', '‚îê'],
    ['üî≤', '‚îò', '‚îå', '‚¨ÜÔ∏è', 'üî≤']
];

const matrix2 = [
    ['DB', 'BüèÅ', '‚îî', '‚û°Ô∏è', '‚¨ÜÔ∏è'],
    ['‚îî', '‚îò', '‚¨ÖÔ∏è', 'üî≤', '‚¨áÔ∏è'],
    ['‚îå', '‚îê', 'üî≤', 'üî≤', 'üî≤'],
    ['üî≤', '‚îê', 'üî≤', '‚îò', '‚îê'],
    ['üî≤', '‚îò', '‚îå', '‚¨ÜÔ∏è', 'üî≤']
];

const matrix3 = [
    ['DD', '‚û°Ô∏è', '‚û°Ô∏è', '‚û°Ô∏è', '‚îê'],
    ['‚îî', '‚îò', '‚¨ÖÔ∏è', 'üî≤', 'HüèÅ'],
    ['‚îå', '‚îê', 'üî≤', 'üî≤', 'üî≤'],
    ['üî≤', '‚îê', 'üî≤', '‚îò', '‚îê'],
    ['üî≤', '‚îò', '‚îå', '‚¨ÜÔ∏è', 'üî≤']
];

const matrix4 = [
    ['DB', '‚¨áÔ∏è', 'üî≤', 'üî≤', 'BüèÅ'],
    ['üî≤', '‚¨ÖÔ∏è', '‚¨áÔ∏è', '‚¨áÔ∏è', '‚îò'],
    ['‚îò', 'üî≤', 'üî≤', 'üî≤', '‚îå'],
    ['‚îî', '‚îå', '‚¨áÔ∏è', '‚îò', '‚¨ÜÔ∏è'],
    ['‚¨ÜÔ∏è', 'üî≤', 'üî≤', '‚¨ÜÔ∏è', 'üî≤']
]

const matrix5 = [
    ['DB', '‚¨áÔ∏è', 'üî≤', 'üî≤', 'BüèÅ'],
    ['‚îî', '‚û°Ô∏è', '‚û°Ô∏è', '‚û°Ô∏è', '‚îò'],
    ['‚îò', 'üî≤', 'üî≤', 'üî≤', '‚îå'],
    ['‚îî', '‚îå', '‚¨áÔ∏è', '‚îò', '‚¨ÜÔ∏è'],
    ['‚¨ÜÔ∏è', 'üî≤', 'üî≤', '‚¨ÜÔ∏è', 'üî≤']
]

const matrix6 = [
    ['DB', 'üî≤', '‚îî', '‚îå', 'üî≤'],
    ['‚îî', '‚û°Ô∏è', '‚îê', '‚îå', 'üî≤'],
    ['DüèÅ', '‚¨ÖÔ∏è', '‚îò', 'üî≤', '‚îå'],
    ['üî≤', '‚îå', '‚¨ÖÔ∏è', '‚¨ÖÔ∏è', 'üî≤'],
    ['üî≤', '‚û°Ô∏è', '‚îò', '‚îî', '‚¨ÖÔ∏è']
]

// console.log(findPath(matrix1)); // Renvoie true s'il existe un chemin entre le d√©but et la fin
// console.log(findPath(matrix2));
// console.log(findPath(matrix3));
// console.log(findPath(matrix4));
// console.log(findPath(matrix6));


